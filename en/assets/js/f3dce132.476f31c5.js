"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4644],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Set"},i=void 0,s={unversionedId:"basic/overwriting",id:"basic/overwriting",title:"Set",description:"Update And Merge State",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/basic/overwriting.md",sourceDirName:"basic",slug:"/basic/overwriting",permalink:"/zustand-vue/en/docs/basic/overwriting",draft:!1,editUrl:"https://github.com/AwesomeDevin/zustand-vue/tree/main/docs/docs/basic/overwriting.md",tags:[],version:"current",frontMatter:{title:"Set"},sidebar:"tutorialSidebar",previous:{title:"Select State",permalink:"/zustand-vue/en/docs/basic/fetch"},next:{title:"Async Actions",permalink:"/zustand-vue/en/docs/basic/async"}},l={},c=[{value:"Update And Merge State",id:"update-and-merge-state",level:2},{value:"Delete And Overwrite State",id:"delete-and-overwrite-state",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"update-and-merge-state"},"Update And Merge State"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"state")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"zustand")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"zustand-vue")," needs to trigger the ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," function to implement the update, which will do a shallow merge with the existing state in the store. Note: About ",(0,a.kt)("a",{parentName:"p",href:"/docs/advanced/sickof-changing-nested-state"},"Nested State")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const useStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  setSalmon: (newVal) => set(() => ({ salmon:1 })),  // won't delete tuna, will get {salmon, tuna, setSalmon }\n}))\n")),(0,a.kt)("h2",{id:"delete-and-overwrite-state"},"Delete And Overwrite State"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"set")," function has a second parameter, which defaults to false. If true, it will replace (overwrite) the state model, not merge. Be careful not to wipe out parts you rely on, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"actions"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import omit from 'lodash-es/omit'\n\nconst useStore = create((set) => ({\n  salmon: 1,\n  tuna: 2,\n  deleteTuna: () => set((state) => omit(state, ['tuna']), true), // state.tuna will be deleted, other state, actions will be kept\n  deleteEverything: () => set({}, true), // Will clear the complete store, including state, actions\n}))\n")))}p.isMDXComponent=!0}}]);